// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}



enum LoginAttempt {
  SUCCESS
  FAILED
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String 
  verified        Boolean  @default(false)
  role           Role     @default(USER)
  status         AccountStatus   @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  loginHistories LoginHistory[]
  verificationTokens VerificationToken[]
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  loginAttempt   LoginAttempt    @default(SUCCESS)
  loginAt   DateTime @default(now())
}


enum VerificationStatus {
  PENDING
  VERIFIED
  EXPIRED
}

enum VerificationTokenType {
  ACCOUNT_ACTIVATION
  PASSWORD_RESET
  EMAIL_CHANGE
  PHONE_CHANGE
  TWO_FACTOR_AUTHENTICATION
  TWO_FACTOR_AUTHENTICATION_DISABLE

}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  verifiedAt DateTime?
  status    VerificationStatus @default(PENDING)
  type      VerificationTokenType @default(ACCOUNT_ACTIVATION)
  issuedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}